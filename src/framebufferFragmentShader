precision highp float;
varying vec2 v_texCoord;
uniform sampler2D u_texture;
uniform float u_time;
uniform int u_option; //effect option
uniform float u_width; //screen width in pixels
uniform float u_height; //screen height in pixels

void main() {

    if(u_option == 0){
        // standard, no effect
        gl_FragColor = texture2D(u_texture, v_texCoord);
    }

    else if(u_option == 1){
      //gray scale effect
      vec4 c = texture2D(u_texture, v_texCoord);
      float average = (c.r + c.g + c.b)/3.0;
      gl_FragColor = vec4(average,average,average,1.0);
    }

    else if(u_option == 2){
       //fog of war effect
       vec4 c = texture2D(u_texture, v_texCoord);
       float x = v_texCoord.x - 0.5;
       float y = v_texCoord.y - 0.5;
       float h = sqrt(x*x + y*y);
       gl_FragColor = mix(c, vec4(0.,0.,0.,1.), h*2.0);
    }

    else if(u_option == 3){
        //spiral effect
        vec4 c = texture2D(u_texture, v_texCoord);
        float x = v_texCoord.x - 0.5;
        float y = v_texCoord.y - 0.5;
        float h = sqrt(x*x + y*y);
        float angle = mod(atan(y,x) + u_time * 0.01, 3.1415*2.0);
        float a = 0.01;
        float b = 0.1;
        float spiralRadius = a + b * angle;
        float distanceToSpiral = abs(h - spiralRadius);
        float color = smoothstep(0.1, 0.2, distanceToSpiral);
        gl_FragColor = vec4((c.rgb+vec3(color,0.0,0.0))/2.0,1.0);
    }    

    else if(u_option == 4){
      //reverse
      vec4 color = texture2D(u_texture, v_texCoord); 
      gl_FragColor = vec4(vec3(1.0-color.r,1.0-color.g,1.0-color.b),1.0);
    }

    else if(u_option == 5){
      ///wavy
      const float SPEED = 2.0;      // Adjust for slower/faster transitions
      const float AMPLITUDE = 10.0; // Adjust for smaller/larger distortions

      vec2 newTc = v_texCoord;
      float dy = cos(newTc.x + u_time/100.0) / 2000.0;
      float dx = cos(newTc.y + u_time/100.0) / 2000.0;
      newTc.x += AMPLITUDE * sin(SPEED * u_time/100.0) * dx;
      newTc.y += AMPLITUDE * sin(SPEED * u_time/100.0) * dy;
      gl_FragColor = texture2D(u_texture, newTc);
    }
    else if(u_option == 6){
      //pixelation
      float dx = 0.0030;
      float dy = 0.0030;
      vec2 coord = vec2(dx * floor(v_texCoord.x/dx), dy*floor(v_texCoord.y/dy));
      gl_FragColor = texture2D(u_texture, coord);
    }
    else if(u_option == 7){

        //box blur effect

        float dx = 1.0 / u_width;
        float dy = 1.0 / u_height;

        vec2 bl = v_texCoord - vec2(dx, dy); // bottom-left
        vec2 tr = v_texCoord + vec2(dx, dy); // top-right
        vec2 br = v_texCoord - vec2(dx,-dy); // bottom-right
        vec2 tl = v_texCoord + vec2(dx,-dy); // top-left
        vec2 bc = v_texCoord - vec2(dx, 0.); // bottom-center
        vec2 tc = v_texCoord + vec2(dx, 0.); // top-center
        vec2 cl = v_texCoord - vec2(0., dy); // center-left
        vec2 cr = v_texCoord + vec2(0., dy); // center-right

        vec4 color = texture2D(u_texture, v_texCoord) +
                     texture2D(u_texture, bl) +
                     texture2D(u_texture, tr) +
                     texture2D(u_texture, br) +
                     texture2D(u_texture, tl) +
                     texture2D(u_texture, bc) +
                     texture2D(u_texture, tc) +
                     texture2D(u_texture, cl) +
                     texture2D(u_texture, cr);
        gl_FragColor = color / 9.0;

    }
    else if(u_option == 8){

        //sobel effect

        float dx = 1.0 / u_width;
        float dy = 1.0 / u_height;

        vec2 bl = v_texCoord - vec2(dx, dy); // bottom-left
        vec2 tr = v_texCoord + vec2(dx, dy); // top-right
        vec2 br = v_texCoord - vec2(dx,-dy); // bottom-right
        vec2 tl = v_texCoord + vec2(dx,-dy); // top-left
        vec2 bc = v_texCoord - vec2(dx, 0.); // bottom-center
        vec2 tc = v_texCoord + vec2(dx, 0.); // top-center
        vec2 cl = v_texCoord - vec2(0., dy); // center-left
        vec2 cr = v_texCoord + vec2(0., dy); // center-right

        vec4 colorY = texture2D(u_texture, v_texCoord) * 0.0 +
                     texture2D(u_texture, bl) +
                     texture2D(u_texture, tr) * -1.0 +
                     texture2D(u_texture, br) +
                     texture2D(u_texture, tl) * -1.0 +
                     texture2D(u_texture, bc) * 2.0 +
                     texture2D(u_texture, tc) * -2.0 +
                     texture2D(u_texture, cl) +
                     texture2D(u_texture, cr) ;
        vec4 colorX = texture2D(u_texture, v_texCoord) * 0.0 +
                     texture2D(u_texture, bl) * -1.0+
                     texture2D(u_texture, tr) * 1.0 +
                     texture2D(u_texture, br) * 1.0 +
                     texture2D(u_texture, tl) * -1.0+
                     texture2D(u_texture, bc) +
                     texture2D(u_texture, tc) +
                     texture2D(u_texture, cl) * -2.0+
                     texture2D(u_texture, cr) * 2.0;
        vec4 color = sqrt(colorX*colorX + colorY*colorY);
        gl_FragColor = vec4(color.rgb/3.0
, 1.0);

    }
    else if(u_option == 9){
        vec4 color = texture2D(u_texture, v_texCoord);
        float radius = 0.2;
        vec2 uv = v_texCoord ;
        uv = (uv * 2.0 - 1.0) ;
        float dist = length(uv);
        float circle = smoothstep(radius- 0.1, radius, dist);
        float angle = atan(uv.y,uv.x) + u_time/5000.0;
        float noise = fract(sin(angle*100.0+u_time/10000.0) * 0.5);
        float bolt = step(0.35, noise);
        if(dist<=radius && bolt >0.0){
            float thickness = 0.8;
            if(abs(uv.x - cos(angle)*dist)<thickness && abs(uv.y - sin(angle) * dist) < thickness){
                gl_FragColor = color + circle*vec4(0.5,0.0,0.0,1.0);
            }else{
                gl_FragColor = color + circle*vec4(0.0,0.0,0.0,1.0);
            }
        }else{
            gl_FragColor = color + circle*vec4(0.0,0.0,0.0,1.0);
        }
    }
    else{
        // standard, no effect
        gl_FragColor = texture2D(u_texture, v_texCoord);
    }



}
